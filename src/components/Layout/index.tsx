import { Alert, Box, Snackbar } from "@mui/material";
import Head from "next/head";
import { useEffect, useMemo, useState } from "react";
import { useRecoilState } from "recoil";
import styles from "../../../styles/Home.module.scss";
import { ResponseState } from "../../state/atom";
import AppBar from "../AppBar";
import { Drawer } from "../Drawer";
import GlobalContext from "../Drawer/GlobalContext";

type Props = {
  title: string;
  children?: JSX.Element | JSX.Element[];
};

const drawerWidth = 256;

const Home = ({ children, title, ...props }: Props) => {
  const [open, setOpen] = useState(true);
  const value = useMemo(() => ({ open, setOpen }), [open]);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [response, setResponse] = useRecoilState(ResponseState);

  const handleClickSnackbar = () => {
    setOpenSnackbar(true && response?.type === "success");
  };

  const handleCloseSnackbar = (
    event: React.SyntheticEvent | Event,
    reason?: string
  ) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenSnackbar(false);
    // setIsOpenDrawer(false)
  };

  useEffect(() => {
    if (response !== undefined ){
      setOpenSnackbar(
        (response?.type === "success" || response?.type === "error") &&
          response !== undefined
      );
    }
  }, [response]);

  return (
    <GlobalContext.Provider value={value}>
      <div className={styles.container}>
        <Snackbar
          autoHideDuration={1000}
          open={openSnackbar}
          onClose={handleCloseSnackbar}
        >
          <Alert
            variant="filled"
            onClose={handleCloseSnackbar}
            severity={response?.type ? response?.type : "info"}
            sx={{ width: "100%" }}
          >
            {response?.data ? response?.data : response?.message}
          </Alert>
        </Snackbar>

        <Head>
          <title>Compal - {}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Box
          sx={{
            width: "100%",
            display: "flex",
          }}
        >
          <AppBar />
          <Drawer />
          <Box
            component="main"
            sx={{
              // width: `calc(100% - ${drawerWidth}px)`,
              minHeight: "100vh",
              // overflowY: 'scroll',
              marginTop: 10,
              background: "#F5F7FB",
              flexGrow: 1,
              pt: 2,
              px: 5,
              pb: 5,
            }}
          >
            {/* <SearchField /> */}
            {children && children}
          </Box>
        </Box>
      </div>
    </GlobalContext.Provider>
  );
};

export default Home;
